# -*- mode: ruby -*-
# # vi: set ft=ruby :

require 'fileutils'

Vagrant.require_version ">= 1.6.0"

$cloud_config_path = File.expand_path("./user-data", File.dirname(__FILE__))
$config_path = File.expand_path("./config.rb", File.dirname(__FILE__))

# Defaults for config options defined in CONFIG
$update_channel = "alpha"
$image_version = "current"
$enable_serial_logging = false
$share_home = false
$vm_name = "core-docker"
$vm_gui = false
$vm_memory = 1024
$vm_cpus = 1
$shared_folders = {}
$forwarded_ports = {}
$ip_address = "192.168.98.100"

if File.exist?($config_path)
  require $config_path
end

Vagrant.configure("2") do |config|
  config.vm.box = "coreos-%s" % $update_channel
  config.vm.box_url = "http://%s.release.core-os.net/amd64-usr/%s/coreos_production_vagrant.json" % [$update_channel, $image_version]

  config.vm.provider "virtualbox" do |v|
    # On VirtualBox, we don't have guest additions or a functional vboxsf
    # in CoreOS, so tell Vagrant that so it can be smarter.
    v.check_guest_additions = false
    v.functional_vboxsf     = false
  end

  # plugin conflict
  if Vagrant.has_plugin?("vagrant-vbguest") then
    config.vbguest.auto_update = false
  end

  config.vm.define $vm_name do |config|
    config.vm.hostname = $vm_name

    if $enable_serial_logging
      logdir = File.join(File.dirname(__FILE__), "log")
      FileUtils.mkdir_p(logdir)

      serialFile = File.join(logdir, "%s-serial.txt" % $vm_name)
      FileUtils.touch(serialFile)

      config.vm.provider "virtualbox" do |vb, override|
        vb.customize ["modifyvm", :id, "--uart1", "0x3F8", "4"]
        vb.customize ["modifyvm", :id, "--uartmode1", serialFile]
      end
    end

    if $expose_docker_tcp
      config.vm.network "forwarded_port", guest: 2375, host: $expose_docker_tcp, auto_correct: true
      config.vm.post_up_message = "You can use the docker tool locally by setting the following env var:
  export DOCKER_HOST='tcp://127.0.0.1:%s' && unset DOCKER_TLS_VERIFY && unset DOCKER_CERT_PATH
" % $expose_docker_tcp
    else
      config.vm.post_up_message = "You can use the docker tool locally by setting the following env var:
  export DOCKER_HOST='tcp://%s:2375' && unset DOCKER_TLS_VERIFY && unset DOCKER_CERT_PATH
" % $ip_address
    end

    # Configure SSH port forwarding to start at port 2250
    config.vm.network "forwarded_port", guest: 22, host: 2250, id: "ssh", auto_correct: true

    $forwarded_ports.each do |guest, host|
      config.vm.network "forwarded_port", guest: guest, host: host, auto_correct: true
    end

    # Create a private network, which allows host-only access to the machine
    # using a specific IP.
    config.vm.network "private_network", ip: $ip_address

    # Create a public network, which generally matched to bridged network.
    # Bridged networks make the machine appear as another physical device on
    # your network.
    # config.vm.network "public_network"

    $shared_folders.each_with_index do |(host_folder, guest_folder), index|
      config.vm.synced_folder host_folder.to_s, guest_folder.to_s, id: "core-share%02d" % index, :nfs => true, :mount_options => ["nolock","vers=3","udp"]
    end

    if $share_home
      config.vm.synced_folder ENV['HOME'], ENV['HOME'], id: "home", :nfs => true, :mount_options => ["nolock","vers=3","udp"]
      # if (RUBY_PLATFORM =~ /darwin/) != nil
      #   config.vm.synced_folder ENV['HOME'], ENV['HOME'], id: "home", :nfs => true, :mount_options => ["nolock","vers=3","udp"], :bsd__nfs_options => ["-maproot=0:0"]
      # else
      #   config.vm.synced_folder ENV['HOME'], ENV['HOME'], id: "home", :nfs => true, :mount_options => ["nolock","vers=3","udp"], :linux__nfs_options => ["no_root_squash"]
      # end
    end

    config.vm.provider "virtualbox" do |vb|
      vb.gui = $vm_gui
      vb.memory = $vm_memory
      vb.cpus = $vm_cpus
      vb.name = $vm_name
    end

    if File.exist?($cloud_config_path)
      config.vm.provision "file", source: "#{$cloud_config_path}", destination: "/tmp/vagrantfile-user-data"
      config.vm.provision "shell", name: "Populate cloud-init user-data", inline: "mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/"
    end

  end
end